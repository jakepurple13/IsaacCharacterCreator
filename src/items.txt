
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.DosFileAttributes;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class FileSearch {

  private String fileNameToSearch;
  private List<String> result = new ArrayList<String>();
	
  public String getFileNameToSearch() {
	return fileNameToSearch;
  }

  public void setFileNameToSearch(String fileNameToSearch) {
	this.fileNameToSearch = fileNameToSearch;
  }

  public List<String> getResult() {
	return result;
  }

  public static void main(String[] args) throws IOException {
	  
	  System.getProperties().list(System.out);
	  
	 /* FileSearch ff = new FileSearch();
     // Scanner scan = new Scanner(System.in);
      System.out.println("Enter the file to be searched.. " );
     // String name = scan.next();
      System.out.println("Enter the directory where to search ");
     // String directory = scan.next();
      //ff.findFile("players.xml",new File(System.getProperty("user.home")));

	  FileSearch fw = new FileSearch();
      fw.walk(System.getProperty("user.home"));*/
	 
      /*Files.walk(Paths.get(System.getProperty("user.home")))
      .filter(Files::isRegularFile)
      .forEach(System.out::println);*/
	  
	/*FileSearch fileSearch = new FileSearch();
  
        //try different directory and filename :)
	fileSearch.searchDirectory(new File(System.getProperty("user.home")), "players.xml");

	int count = fileSearch.getResult().size();
	if(count ==0){
	    System.out.println("\nNo result found!");
	}else{
	    System.out.println("\nFound " + count + " result!\n");
	    try {
			music1 frame = new music1();
			frame.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	    for (String matched : fileSearch.getResult()){
		System.out.println("Found : " + matched);
	    }
	}*/
  }

  public void searchDirectory(File directory, String fileNameToSearch) {

	setFileNameToSearch(fileNameToSearch);

	if (directory.isDirectory()) {
	    search(directory);
	} else {
	    System.out.println(directory.getAbsoluteFile() + " is not a directory!");
	}

  }

  private void search(File file) {

	if (file.isDirectory()) {
	  //System.out.println("Searching directory ... " + file.getAbsoluteFile());
		
            //do you have permission to read this directory?	
	    if (file.canRead()) {
		for (File temp : file.listFiles()) {
		    if (temp.isDirectory()) {
			search(temp);
		    } else {
			if (getFileNameToSearch().equals(temp.getName().toLowerCase())) {			
			    result.add(temp.getAbsoluteFile().toString());
		    }

		}
	    }

	 } else {
		System.out.println(file.getAbsoluteFile() + "Permission Denied");
	 }
      }

  }
  
  
  public void walk( String path ) {

      File root = new File( path );
      File[] list = root.listFiles();

      if (list == null) return;
      

      for ( File f : list ) {
          if ( f.isDirectory() ) {
              walk( f.getAbsolutePath() );
             /* if(f.getAbsolutePath().contains("players.xml") && !f.getAbsolutePath().contains("My new Wine prefix")) {
            	  System.out.println( "Dir:" + f.getAbsoluteFile() );
            	  break;
              }*/
              if(f.getAbsolutePath().contains("SteamApps") && !f.getAbsolutePath().contains("My new Wine prefix")) {
            	  System.out.println( "Dir:" + f.getAbsoluteFile() );
            	  break;
              }
              
          }
          else {
        	  /*if(f.getAbsolutePath().contains("players.xml") && !f.getAbsolutePath().contains("My new Wine prefix")) {
            	  System.out.println( "File:" + f.getAbsoluteFile() );
            	  break;
              }*/
        	  if(f.getAbsolutePath().contains("SteamApps") && !f.getAbsolutePath().contains("My new Wine prefix")) {
            	  System.out.println( "Dir:" + f.getAbsoluteFile() );
            	  break;
              }
              //System.out.println( "File:" + f.getAbsoluteFile() );
          }
      }
  }
  
  public void findFile(String name,File file)
  {
      File[] list = file.listFiles();
      if(list!=null)
      for (File fil : list)
      {
          if (fil.isDirectory())
          {
              findFile(name,fil);
          }
          else if (name.equalsIgnoreCase(fil.getName()))
          {
              System.out.println(fil.getParentFile());
          }
      }
  }


}